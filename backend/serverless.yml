service:
  name: recommend

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-iam-roles-per-function
  - serverless-plugin-canary-deployments

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    RECOMMENDATIONS_TABLE: Recommendations-${self:provider.stage}
    RECOMMENDATIONS_USER_INDEX: RecommendationsUserIndex
    ATTACHMENTS_S3_BUCKET: recommend-bucket-12345-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetRecommendations:
    handler: src/lambda/http/getRecommendations.handler
    events:
      - http:
          method: get
          path: recommendations
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECOMMENDATIONS_TABLE}/index/${self:provider.environment.RECOMMENDATIONS_USER_INDEX}

  CreateRecommendation:
    handler: src/lambda/http/createRecommendation.handler
    events:
      - http:
          method: post
          path: recommendations
          cors: true
          reqValidatorName: RequestBodyValidator
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/create-recommendation-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECOMMENDATIONS_TABLE}

  UpdateRecommendation:
    handler: src/lambda/http/updateRecommendation.handler
    events:
      - http:
          method: patch
          path: recommendations/{recommendationId}
          cors: true
          reqValidatorName: RequestBodyValidator
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/models/update-recommendation-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECOMMENDATIONS_TABLE}/index/${self:provider.environment.RECOMMENDATIONS_USER_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECOMMENDATIONS_TABLE}

  DeleteRecommendation:
    handler: src/lambda/http/deleteRecommendation.handler
    events:
      - http:
          method: delete
          path: recommendations/{recommendationId}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECOMMENDATIONS_TABLE}/index/${self:provider.environment.RECOMMENDATIONS_USER_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECOMMENDATIONS_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: recommendations/{recommendationId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECOMMENDATIONS_TABLE}/index/${self:provider.environment.RECOMMENDATIONS_USER_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECOMMENDATIONS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RecommendationsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: recommendationId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: recommendationId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECOMMENDATIONS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.RECOMMENDATIONS_USER_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: recommendationId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENTS_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENTS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket
